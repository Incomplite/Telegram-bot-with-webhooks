from datetime import date, datetime, timedelta

from fastapi import APIRouter, HTTPException
from fastapi.requests import Request
from fastapi.responses import JSONResponse

from src.api.dao import AppointmentDAO, AvailableTimeSlotDAO, ServiceDAO, UserDAO

from src.api.schemas import AppointmentData, Schedule, ServiceData
from src.api.utils import archive_appointment
from src.bot.bot_instance import bot
from src.bot.handlers.reminder_router import schedule_reminder
from src.bot.keyboards import contact_button, main_keyboard
from src.config import settings
from src.database.models import AppointmentStatus
from src.middlewares.scheduler import scheduler

router = APIRouter(prefix='/api', tags=['API'])


@router.post("/appointment", response_class=JSONResponse)
async def create_appointment(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    data = await request.json()
    validated_data = AppointmentData(**data)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    formatted_time = validated_data.appointment_time.strftime("%H:%M")
    formatted_date = validated_data.appointment_date.strftime("%d.%m.%Y")

    user = await UserDAO.find_one_or_none(id=validated_data.user_id)
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message = (
        f"üéâ <b>{validated_data.name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:</b>\n"
        f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {validated_data.name}\n"
        f"üíÖ <b>–£—Å–ª—É–≥–∏:</b> {', '.join(validated_data.services)}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {formatted_date}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {formatted_time}\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {validated_data.total_price} —Ä—É–±.\n\n"
    )
    contact_message = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –∑–∞–ø–∏—Å—å! ‚ú®\n"
        "–ó–∞ –¥–µ–Ω—å –¥–æ –í–∞—à–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞, –í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å.üåº"
        "\n–ï—Å–ª–∏ –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Ä–∞–Ω—å—à–µ, —Å–æ–æ–±—â–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—É –æ–± —ç—Ç–æ–º."
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n"
        "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {validated_data.name}\n"
        f"üíÖ –£—Å–ª—É–≥–∏: {', '.join(validated_data.services)}\n"  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ —É—Å–ª—É–≥–∏
        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {formatted_time}\n"
        f"üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {validated_data.total_price} —Ä—É–±.\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user.username}\n"
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    appointment = await AppointmentDAO.add(
        user_id=validated_data.user_id,
        name=validated_data.name,
        date=validated_data.appointment_date,
        time=validated_data.appointment_time,
        total_price=validated_data.total_price,
        status=AppointmentStatus.ACTIVE.value
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –∫ –∑–∞—è–≤–∫–µ
    for service_name in validated_data.services:
        service = await ServiceDAO.find_one_or_none(name=service_name)
        if service:
            await AppointmentDAO.add_service(appointment.id, service)

    change_time = datetime.combine(
        validated_data.appointment_date,
        validated_data.appointment_time
    ) + timedelta(hours=2)
    # + timedelta(hours=2)
    scheduler.add_job(archive_appointment, "date", run_date=change_time, args=[appointment.id])
    schedule_reminder(appointment)

    kb = main_keyboard(user_id=validated_data.user_id, first_name=validated_data.name)
    inline_kb = contact_button()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    await bot.send_message(chat_id=validated_data.user_id, text=message, reply_markup=kb)
    await bot.send_message(chat_id=validated_data.user_id, text=contact_message, reply_markup=inline_kb)
    await bot.send_message(chat_id=settings.MASTER_CHAT_ID, text=admin_message)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {"message": "success!"}


@router.delete("/appointment/{appointment_id}")
async def delete_appointment(appointment_id: int):
    is_deleted = await AppointmentDAO.delete_with_services(appointment_id)
    if is_deleted:
        return JSONResponse(status_code=200, content={"message": "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞"})
    return JSONResponse(status_code=404, content={"message": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})


@router.get("/all-slots/{date}")
async def get_all_slots(date: date):
    slot = await AvailableTimeSlotDAO.find_one_or_none(date=date)
    if slot:
        return {"slots": slot.get_time_slots()}
    return JSONResponse(status_code=404, content={"message": "–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})


@router.get("/available-slots/{date}")
async def get_available_slots(date: date):
    slot = await AvailableTimeSlotDAO.find_one_or_none(date=date)
    if slot:
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
        booked_times = await AppointmentDAO.find_all(date=date)
        booked_times = {time.time.strftime("%H:%M") for time in booked_times}
        available_slots = [time for time in slot.get_time_slots() if time not in booked_times]
        return {"slots": available_slots}
    return JSONResponse(status_code=404, content={"message": "–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})


@router.post("/schedule")
async def save_schedule(schedule: Schedule):
    if not schedule.slots or len(schedule.slots) == 0:
        # –ï—Å–ª–∏ —Å–ª–æ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        await AvailableTimeSlotDAO.delete(date=schedule.date)
        return {"status": "deleted"}

    # –ï—Å–ª–∏ —Å–ª–æ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await AvailableTimeSlotDAO.add_or_update(schedule.date, schedule.slots)
    return {"status": "success"}


@router.get("/schedules")
async def get_schedules():
    schedules = await AvailableTimeSlotDAO.find_all()
    response = {}
    for slot in schedules:
        response[slot.date] = slot.get_time_slots()

    return [{"date": date, "slots": times} for date, times in response.items()]


@router.post("/services", status_code=201)
async def create_service(request: Request):
    data = await request.json()
    validated_data = ServiceData(**data)
    service = await ServiceDAO.add(
        name=validated_data.name,
        price=validated_data.price,
        duration=validated_data.duration,
        description=validated_data.description
    )

    if not service:
        raise HTTPException(status_code=400, detail="Failed to create service")

    return service


@router.put("/services/{service_id}", status_code=200)
async def update_service(service_id: int, request: Request):
    data = await request.json()

    # –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É
    service = await ServiceDAO.find_one_or_none(id=service_id)
    if not service:
        raise HTTPException(status_code=404, detail="Service not found")

    # –û–±–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã
    for key, value in data.items():
        setattr(service, key, value)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    result = await ServiceDAO.update(service_id, **data)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if result:
        return await ServiceDAO.find_one_or_none(id=service_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    else:
        raise HTTPException(status_code=500, detail="Failed to update service")


@router.delete("/services/{service_id}")
async def delete_service(service_id: int):
    service = await ServiceDAO.delete(id=service_id)
    if service:
        return JSONResponse(status_code=200, content={"message": "–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞"})
    return JSONResponse(status_code=404, content={"message": "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

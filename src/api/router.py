from datetime import date

from fastapi import APIRouter, HTTPException
from fastapi.requests import Request
from fastapi.responses import JSONResponse

from src.api.schemas import AppointmentData, Schedule
from src.bot.bot_instance import bot
from src.config import settings
from src.database import Appointment, Service, AvailableTimeSlot
from src.database.db import get_db
from src.keyboards import main_keyboard

router = APIRouter(prefix='/api', tags=['API'])


@router.post("/appointment", response_class=JSONResponse)
async def create_appointment(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    data = await request.json()
    validated_data = AppointmentData(**data)

    service_names = validated_data.services  # –£—Å–ª—É–≥–∏ —É–∂–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message = (
        f"üéâ <b>{validated_data.name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:</b>\n"
        f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {validated_data.name}\n"
        f"üíá <b>–£—Å–ª—É–≥–∏:</b> {', '.join(service_names)}\n"  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ —É—Å–ª—É–≥–∏
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_date}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_time}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! ‚ú® –ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n"
        "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {validated_data.name}\n"
        f"üíá –£—Å–ª—É–≥–∏: {', '.join(service_names)}\n"  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ —É—Å–ª—É–≥–∏
        f"üìÖ –î–∞—Ç–∞: {validated_data.appointment_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {validated_data.appointment_time}\n"
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with get_db() as db:
        appointment = Appointment(
            user_id=validated_data.user_id,
            name=validated_data.name,
            date=validated_data.appointment_date,
            time=validated_data.appointment_time
        )
        db.add(appointment)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø–∏—Å–∏
        db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        for service_name in validated_data.services:
            service = db.query(Service).filter(Service.name == service_name).first()
            if service:
                appointment.services.append(service)  # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –∫ –∑–∞–ø–∏—Å–∏

        db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —É—Å–ª—É–≥–∞–º–∏

    kb = main_keyboard(user_id=validated_data.user_id, first_name=validated_data.name)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    await bot.send_message(chat_id=validated_data.user_id, text=message, reply_markup=kb)
    await bot.send_message(chat_id=settings.ADMIN_USER_ID, text=admin_message, reply_markup=kb)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {"message": "success!"}


@router.delete("/appointment/{appointment_id}")
async def delete_appointment(appointment_id: int):
    with get_db() as db:
        appointment = db.query(Appointment).filter(Appointment.id == appointment_id).first()
        if appointment:
            db.delete(appointment)
            db.commit()
            return JSONResponse(status_code=200, content={"message": "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞"})
        return JSONResponse(status_code=404, content={"message": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})


@router.get("/available-slots/{date}")
async def get_available_slots(date: date):
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏–∑ –ë–î –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    with get_db() as db:
        slot = db.query(AvailableTimeSlot).filter(AvailableTimeSlot.date == date).first()
        if slot:
            return {"slots": slot.get_time_slots()}
        return JSONResponse(status_code=404, content={"message": "–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})


@router.post("/schedule")
async def save_schedule(schedule: Schedule):
    with get_db() as db:
        existing_slots = db.query(AvailableTimeSlot).filter(AvailableTimeSlot.date == schedule.date).first()

        if not schedule.slots or len(schedule.slots) == 0:
            # –ï—Å–ª–∏ —Å–ª–æ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            if existing_slots:
                db.query(AvailableTimeSlot).filter(AvailableTimeSlot.date == schedule.date).delete()
                db.commit()

        # –ï—Å–ª–∏ —Å–ª–æ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        if existing_slots:
            existing_slots.set_time_slots(schedule.slots)
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            new_slot = AvailableTimeSlot(date=schedule.date)
            new_slot.set_time_slots(schedule.slots)
            db.add(new_slot)

        db.commit()
    
        return {"status": "success"}

@router.get("/schedules")
async def get_schedules():
    with get_db() as db:
        schedules = db.query(AvailableTimeSlot).all()
        response = {}
        for slot in schedules:
            response[slot.date] = slot.get_time_slots()
        
        return [{"date": date, "slots": times} for date, times in response.items()]
